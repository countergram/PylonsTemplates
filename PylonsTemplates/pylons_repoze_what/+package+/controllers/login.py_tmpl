import logging

from pylons import request, response, url, session, tmpl_context as c
from pylons.controllers.util import abort, redirect_to

from {{package}}.lib.base import BaseController, render

log = logging.getLogger(__name__)

class LoginController(BaseController):
    def login(self):
        """This is where the login form should be rendered."""

        # Number of times the user has tried to log in
        c.login_counter = request.environ['repoze.who.logins']
        
        # Previous URL, if we were redirected to login by an unauhorized error
        c.came_from = request.params.get('came_from') or url('/')
        
        return render('auth/login.html')
    
    def post_login(self):
        identity = request.environ.get('repoze.who.identity')
        came_from = str(request.params.get('came_from', '')) or url('/')
        if not identity:
            # The user provided the wrong credentials
            login_counter = request.environ['repoze.who.logins'] + 1
            redirect_to(url('/login', came_from=came_from,
                                __logins=login_counter))
        
        # Uncomment if you are going to use flash() in your application
        # userid = identity['repoze.who.userid']
        # flash('Welcome back, %s!' % userid)
        
        redirect_to(url(came_from))
    
    def post_logout(self):
        return render('auth/post_logout.html')
